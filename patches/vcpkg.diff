 ports/ffmpeg/portfile.cmake      |  6 +++---
 scripts/toolchains/windows.cmake | 38 +++++++++++++++++++++++++++++---------
 2 files changed, 32 insertions(+), 12 deletions(-)

diff --git a/ports/ffmpeg/portfile.cmake b/ports/ffmpeg/portfile.cmake
index 76cc00805..3f6b802a5 100644
--- a/ports/ffmpeg/portfile.cmake
+++ b/ports/ffmpeg/portfile.cmake
@@ -51,7 +51,7 @@ else()
     set(LIB_PATH_VAR "LIBRARY_PATH")
 endif()
 
-set(OPTIONS "--enable-pic --disable-doc --enable-debug --enable-runtime-cpudetect")
+set(OPTIONS "--enable-pic --disable-doc --enable-runtime-cpudetect")
 
 if(VCPKG_TARGET_ARCHITECTURE STREQUAL "arm")
   set(OPTIONS "${OPTIONS} --disable-asm --disable-x86asm")
@@ -482,8 +482,8 @@ if(VCPKG_TARGET_IS_UWP)
 endif()
 
 # Note: --disable-optimizations can't be used due to https://ffmpeg.org/pipermail/libav-user/2013-March/003945.html
-set(OPTIONS_DEBUG "--debug")
-set(OPTIONS_RELEASE "")
+set(OPTIONS_DEBUG "--enable-debug --debug")
+set(OPTIONS_RELEASE "--disable-debug")
 
 set(OPTIONS "${OPTIONS} ${OPTIONS_CROSS}")
 
diff --git a/scripts/toolchains/windows.cmake b/scripts/toolchains/windows.cmake
index 7c8a54989..85c3a2b6d 100644
--- a/scripts/toolchains/windows.cmake
+++ b/scripts/toolchains/windows.cmake
@@ -50,21 +50,41 @@ if(NOT _CMAKE_IN_TRY_COMPILE)
         # VS 2013 does not support /utf-8
         set(CHARSET_FLAG)
     endif()
+    set(D2FH4_FLAG)
+    if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
+        set(D2FH4_FLAG /d2FH4)
+    endif()
 
-    set(CMAKE_CXX_FLAGS " /nologo /DWIN32 /D_WINDOWS /W3 ${CHARSET_FLAG} /GR /EHsc /MP ${VCPKG_CXX_FLAGS}" CACHE STRING "")
-    set(CMAKE_C_FLAGS " /nologo /DWIN32 /D_WINDOWS /W3 ${CHARSET_FLAG} /MP ${VCPKG_C_FLAGS}" CACHE STRING "")
-    set(CMAKE_RC_FLAGS "-c65001 /DWIN32" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS " /nologo /await:strict /bigobj /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /D_ENABLE_EXTENDED_ALIGNED_STORAGE /W3 ${CHARSET_FLAG} /GR /EHsc ${D2FH4_FLAG} /MP /FS /Zc:__cplusplus /ZH:SHA_256 /Zi ${VCPKG_CXX_FLAGS}" CACHE STRING "")
+    set(CMAKE_C_FLAGS " /nologo /await:strict /bigobj /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /D_ENABLE_EXTENDED_ALIGNED_STORAGE /W3 ${CHARSET_FLAG} /MP /FS /ZH:SHA_256 /Zi ${VCPKG_C_FLAGS}" CACHE STRING "")
+    set(CMAKE_RC_FLAGS "/nologo /c65001 /DWIN32" CACHE STRING "")
 
     unset(CHARSET_FLAG)
+    unset(D2FH4_FLAG)
+    set(GL_FLAG)
+    set(LTCG_FLAG)
+    if(VCPKG_LIBRARY_LINKAGE STREQUAL "dynamic")
+        set(GL_FLAG /GL)
+        set(LTCG_FLAG /LTCG)
+    endif()
 
-    set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Z7 /Ob0 /Od /RTC1 ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")
-    set(CMAKE_C_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Z7 /Ob0 /Od /RTC1 ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
-    set(CMAKE_CXX_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Oi /Gy /DNDEBUG /Z7 ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
-    set(CMAKE_C_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Oi /Gy /DNDEBUG /Z7 ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Ob0 /Od /RTC1 /JMC ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")
+    set(CMAKE_C_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Ob0 /Od /RTC1 /JMC ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Ob3 /Oi /Oy /DNDEBUG /guard:cf ${GL_FLAG} /GT /Gw /Gy /QIntel-jcc-erratum /Qspectre-load /Zc:inline ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_C_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Ob3 /Oi /Oy /DNDEBUG /guard:cf ${GL_FLAG} /GT /Gw /Gy /QIntel-jcc-erratum /Qspectre-load /Zc:inline ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
+
+    unset(GL_FLAG)
+    set(HEVA_FLAG)
+    if(VCPKG_TARGET_ARCHITECTURE STREQUAL "x64")
+        set(HEVA_FLAG /HIGHENTROPYVA)
+    endif()
 
     string(APPEND CMAKE_STATIC_LINKER_FLAGS_RELEASE_INIT " /nologo ")
-    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/nologo /DEBUG /INCREMENTAL:NO /OPT:REF /OPT:ICF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
-    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/nologo /DEBUG /INCREMENTAL:NO /OPT:REF /OPT:ICF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/nologo /DEBUG /DYNAMICBASE ${HEVA_FLAG} /LARGEADDRESSAWARE ${LTCG_FLAG} /NXCOMPAT /INCREMENTAL:NO /OPT:REF /OPT:ICF /GUARD:CF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/nologo /DEBUG /DYNAMICBASE ${HEVA_FLAG} /LARGEADDRESSAWARE ${LTCG_FLAG} /NXCOMPAT /TSAWARE /INCREMENTAL:NO /OPT:REF /OPT:ICF /GUARD:CF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
+
+    unset(LTCG_FLAG)
+    unset(HEVA_FLAG)
 
     string(APPEND CMAKE_STATIC_LINKER_FLAGS_DEBUG_INIT " /nologo ")
     string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " /nologo ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_DEBUG} ")
