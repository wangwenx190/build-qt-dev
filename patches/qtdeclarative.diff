 tools/qml/main.cpp                          | 3 +++
 tools/qmlcachegen/qmlcachegen.cpp           | 3 +++
 tools/qmldom/qmldomtool.cpp                 | 3 +++
 tools/qmleasing/main.cpp                    | 3 +++
 tools/qmlformat/qmlformat.cpp               | 4 ++++
 tools/qmlimportscanner/main.cpp             | 3 +++
 tools/qmljs/qmljs.cpp                       | 3 +++
 tools/qmljsrootgen/main.cpp                 | 4 ++++
 tools/qmllint/main.cpp                      | 3 +++
 tools/qmlls/qmllanguageservertool.cpp       | 3 +++
 tools/qmlplugindump/main.cpp                | 3 +++
 tools/qmlpreview/main.cpp                   | 2 ++
 tools/qmlprofiler/main.cpp                  | 3 +++
 tools/qmlscene/main.cpp                     | 4 ++++
 tools/qmltc/main.cpp                        | 3 +++
 tools/qmltestrunner/main.cpp                | 2 ++
 tools/qmltime/qmltime.cpp                   | 4 ++++
 tools/qmltyperegistrar/qmltyperegistrar.cpp | 4 ++++
 18 files changed, 57 insertions(+)

diff --git a/tools/qml/main.cpp b/tools/qml/main.cpp
index 9ad2abe781..7afd42058d 100644
--- a/tools/qml/main.cpp
+++ b/tools/qml/main.cpp
@@ -45,6 +45,7 @@
 #include <cstring>
 #include <cstdlib>
 #include <memory>
+#include <clocale>
 
 #define FILE_OPEN_EVENT_WAIT_TIME 3000 // ms
 
@@ -374,6 +375,8 @@ static void loadDummyDataFiles(QQmlEngine &engine, const QString& directory)
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     getAppFlags(argc, argv);
 
     if (glShareContexts)
diff --git a/tools/qmlcachegen/qmlcachegen.cpp b/tools/qmlcachegen/qmlcachegen.cpp
index 1294a26603..6ebd5e266b 100644
--- a/tools/qmlcachegen/qmlcachegen.cpp
+++ b/tools/qmlcachegen/qmlcachegen.cpp
@@ -23,6 +23,7 @@
 #include <private/qresourcerelocater_p.h>
 
 #include <algorithm>
+#include <clocale>
 
 static bool argumentsFromCommandLineAndFile(QStringList& allArguments, const QStringList &arguments)
 {
@@ -55,6 +56,8 @@ static bool argumentsFromCommandLineAndFile(QStringList& allArguments, const QSt
 
 int main(int argc, char **argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     // Produce reliably the same output for the same input by disabling QHash's random seeding.
     QHashSeed::setDeterministicGlobalSeed();
 
diff --git a/tools/qmldom/qmldomtool.cpp b/tools/qmldom/qmldomtool.cpp
index 30eeda3792..b00b370c60 100644
--- a/tools/qmldom/qmldomtool.cpp
+++ b/tools/qmldom/qmldomtool.cpp
@@ -18,6 +18,7 @@
 
 #include <cstdio>
 #include <optional>
+#include <clocale>
 
 #if QT_CONFIG(commandlineparser)
 #    include <QtCore/qcommandlineparser.h>
@@ -37,6 +38,8 @@ using namespace tt;
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     FieldFilter filter = FieldFilter::defaultFilter();
     QCoreApplication a(argc, argv);
     QCoreApplication::setApplicationName("qmldom");
diff --git a/tools/qmleasing/main.cpp b/tools/qmleasing/main.cpp
index 59c34fd845..8cff005957 100644
--- a/tools/qmleasing/main.cpp
+++ b/tools/qmleasing/main.cpp
@@ -4,9 +4,12 @@
 #include "mainwindow.h"
 
 #include <QApplication>
+#include <clocale>
 
 int main(int argc, char ** argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QApplication app(argc, argv);
     QCoreApplication::setApplicationVersion(QLatin1String(QT_VERSION_STR));
 
diff --git a/tools/qmlformat/qmlformat.cpp b/tools/qmlformat/qmlformat.cpp
index 3aa452c21c..887911e8ca 100644
--- a/tools/qmlformat/qmlformat.cpp
+++ b/tools/qmlformat/qmlformat.cpp
@@ -21,6 +21,8 @@
 
 #include "../shared/qqmltoolingsettings.h"
 
+#include <clocale>
+
 using namespace QQmlJS::Dom;
 
 struct Options
@@ -242,6 +244,8 @@ Options buildCommandLineOptions(const QCoreApplication &app)
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QCoreApplication app(argc, argv);
     QCoreApplication::setApplicationName("qmlformat");
     QCoreApplication::setApplicationVersion(QT_VERSION_STR);
diff --git a/tools/qmlimportscanner/main.cpp b/tools/qmlimportscanner/main.cpp
index b36591d1fd..3ce95b3c2e 100644
--- a/tools/qmlimportscanner/main.cpp
+++ b/tools/qmlimportscanner/main.cpp
@@ -32,6 +32,7 @@
 #include <algorithm>
 #include <unordered_map>
 #include <unordered_set>
+#include <clocale>
 
 QT_USE_NAMESPACE
 
@@ -869,6 +870,8 @@ bool argumentsFromCommandLineAndFile(QStringList &allArguments, const QStringLis
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QCoreApplication app(argc, argv);
     QCoreApplication::setApplicationVersion(QLatin1String(QT_VERSION_STR));
     QStringList args;
diff --git a/tools/qmljs/qmljs.cpp b/tools/qmljs/qmljs.cpp
index ae01e7560f..95e2b1c29a 100644
--- a/tools/qmljs/qmljs.cpp
+++ b/tools/qmljs/qmljs.cpp
@@ -25,6 +25,7 @@
 #include <private/qqmljsast_p.h>
 
 #include <iostream>
+#include <clocale>
 
 static void showException(QV4::ExecutionContext *ctx, const QV4::Value &exception, const QV4::StackTrace &trace)
 {
@@ -47,6 +48,8 @@ static void showException(QV4::ExecutionContext *ctx, const QV4::Value &exceptio
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QCoreApplication app(argc, argv);
     QCoreApplication::setApplicationVersion(QLatin1String(QT_VERSION_STR));
     QStringList args = app.arguments();
diff --git a/tools/qmljsrootgen/main.cpp b/tools/qmljsrootgen/main.cpp
index 77abd1be54..8e786d20bd 100644
--- a/tools/qmljsrootgen/main.cpp
+++ b/tools/qmljsrootgen/main.cpp
@@ -15,6 +15,8 @@
 #include <QtCore/qjsonarray.h>
 #include <QtCore/qjsonobject.h>
 
+#include <clocale>
+
 struct PropertyInfo
 {
     QString name;
@@ -324,6 +326,8 @@ static QString buildConstructor(const QJSManagedValue &constructor, QJsonArray *
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QCoreApplication app(argc, argv);
     QCoreApplication::setApplicationVersion(QLatin1String(QT_VERSION_STR));
 
diff --git a/tools/qmllint/main.cpp b/tools/qmllint/main.cpp
index 95cd2ec29c..13dd131555 100644
--- a/tools/qmllint/main.cpp
+++ b/tools/qmllint/main.cpp
@@ -24,6 +24,7 @@
 #include <QtCore/qlibraryinfo.h>
 
 #include <cstdio>
+#include <clocale>
 
 using namespace Qt::StringLiterals;
 
@@ -31,6 +32,8 @@ constexpr int JSON_LOGGING_FORMAT_REVISION = 3;
 
 int main(int argv, char *argc[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QHashSeed::setDeterministicGlobalSeed();
     QList<QQmlJSLogger::Category> categories;
 
diff --git a/tools/qmlls/qmllanguageservertool.cpp b/tools/qmlls/qmllanguageservertool.cpp
index ee49706adc..30d330585f 100644
--- a/tools/qmlls/qmllanguageservertool.cpp
+++ b/tools/qmlls/qmllanguageservertool.cpp
@@ -34,6 +34,7 @@
 #endif
 
 #include <iostream>
+#include <clocale>
 #ifdef Q_OS_WIN32
 #    include <fcntl.h>
 #    include <io.h>
@@ -117,6 +118,8 @@ signals:
 
 int main(int argv, char *argc[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
 #ifdef Q_OS_WIN32
     // windows does not open stdin/stdout in binary mode by default
     int err = _setmode(_fileno(stdout), _O_BINARY);
diff --git a/tools/qmlplugindump/main.cpp b/tools/qmlplugindump/main.cpp
index dac28320f6..59fcee9319 100644
--- a/tools/qmlplugindump/main.cpp
+++ b/tools/qmlplugindump/main.cpp
@@ -34,6 +34,7 @@
 #include <QRegularExpression>
 #include <iostream>
 #include <algorithm>
+#include <clocale>
 
 #include "qmltypereader.h"
 
@@ -985,6 +986,8 @@ QT_END_NAMESPACE
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
 #if defined(Q_OS_WIN) && !defined(Q_CC_MINGW)
     // we do not want windows popping up if the module loaded triggers an assert
     SetErrorMode(SEM_NOGPFAULTERRORBOX);
diff --git a/tools/qmlpreview/main.cpp b/tools/qmlpreview/main.cpp
index 48c632f19e..af40aaab57 100644
--- a/tools/qmlpreview/main.cpp
+++ b/tools/qmlpreview/main.cpp
@@ -2,9 +2,11 @@
 // SPDX-License-Identifier: LicenseRef-Qt-Commercial OR GPL-3.0-only WITH Qt-GPL-exception-1.0
 
 #include "qmlpreviewapplication.h"
+#include <clocale>
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
     QmlPreviewApplication app(argc, argv);
     app.parseArguments();
     return app.exec();
diff --git a/tools/qmlprofiler/main.cpp b/tools/qmlprofiler/main.cpp
index e89eecbef2..7973c0fb0a 100644
--- a/tools/qmlprofiler/main.cpp
+++ b/tools/qmlprofiler/main.cpp
@@ -3,9 +3,12 @@
 
 #include "commandlistener.h"
 #include "qmlprofilerapplication.h"
+#include <clocale>
 
 int main(int argc, char *argv[])
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QmlProfilerApplication app(argc, argv);
 
     app.parseArguments();
diff --git a/tools/qmlscene/main.cpp b/tools/qmlscene/main.cpp
index 891b7534bd..18496d65a7 100644
--- a/tools/qmlscene/main.cpp
+++ b/tools/qmlscene/main.cpp
@@ -34,6 +34,8 @@
 #include <QtCore/QTranslator>
 #include <QtCore/QLibraryInfo>
 
+#include <clocale>
+
 Q_LOGGING_CATEGORY(lcQmlsceneDeprecated, "qt.tools.qmlscene.deprecated")
 
 #ifdef QML_RUNTIME_TESTING
@@ -403,6 +405,8 @@ static QQuickWindow::TextRenderType parseTextRenderType(const QString &renderTyp
 
 int main(int argc, char ** argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     Options options;
 
     QStringList imports;
diff --git a/tools/qmltc/main.cpp b/tools/qmltc/main.cpp
index 5314b1a2c0..dcb9e3f461 100644
--- a/tools/qmltc/main.cpp
+++ b/tools/qmltc/main.cpp
@@ -25,6 +25,7 @@
 #include <QtQml/private/qqmljsdiagnosticmessage_p.h>
 
 #include <cstdlib> // EXIT_SUCCESS, EXIT_FAILURE
+#include <clocale>
 
 using namespace Qt::StringLiterals;
 
@@ -41,6 +42,8 @@ void setupLogger(QQmlJSLogger &logger) // prepare logger to work with compiler
 
 int main(int argc, char **argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     // Produce reliably the same output for the same input by disabling QHash's
     // random seeding.
     QHashSeed::setDeterministicGlobalSeed();
diff --git a/tools/qmltestrunner/main.cpp b/tools/qmltestrunner/main.cpp
index d4d05a2464..83a4deb4a0 100644
--- a/tools/qmltestrunner/main.cpp
+++ b/tools/qmltestrunner/main.cpp
@@ -3,8 +3,10 @@
 
 #include <QtQuickTest/quicktest.h>
 #include <QtCore/qstring.h>
+#include <clocale>
 
 int main(int argc, char **argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
     return quick_test_main(argc, argv, "qmltestrunner", ".");
 }
diff --git a/tools/qmltime/qmltime.cpp b/tools/qmltime/qmltime.cpp
index d36d2953d1..255506c2b6 100644
--- a/tools/qmltime/qmltime.cpp
+++ b/tools/qmltime/qmltime.cpp
@@ -12,6 +12,8 @@
 
 #include <private/qquickview_p.h>
 
+#include <clocale>
+
 Timer *Timer::m_timer = nullptr;
 
 Timer::Timer()
@@ -150,6 +152,8 @@ void usage(const char *name)
 
 int main(int argc, char ** argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     QGuiApplication app(argc, argv);
     QCoreApplication::setApplicationVersion(QLatin1String(QT_VERSION_STR));
 
diff --git a/tools/qmltyperegistrar/qmltyperegistrar.cpp b/tools/qmltyperegistrar/qmltyperegistrar.cpp
index 5d895bbed7..8f7ad43e30 100644
--- a/tools/qmltyperegistrar/qmltyperegistrar.cpp
+++ b/tools/qmltyperegistrar/qmltyperegistrar.cpp
@@ -10,10 +10,14 @@
 
 #include <QtQmlTypeRegistrar/private/qqmltyperegistrar_p.h>
 
+#include <clocale>
+
 using namespace Qt::Literals;
 
 int main(int argc, char **argv)
 {
+    std::setlocale(LC_ALL, "en_US.UTF-8");
+
     // Produce reliably the same output for the same input by disabling QHash's random seeding.
     QHashSeed::setDeterministicGlobalSeed();
 
