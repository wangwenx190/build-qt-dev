From 430bde1fae1db0bc739fcf26b3d56b0649ce1901 Mon Sep 17 00:00:00 2001
From: Yuhang Zhao <2546789017@qq.com>
Date: Sun, 19 Jun 2022 13:06:56 +0800
Subject: [PATCH] wangwenx190: Tweak compiler parameters

Change list:
1. MSVC: Use more aggressive optimizations.
2. MSVC: Enable support Intel CET
3. MSVC: Enable support Intel JCC
4. MSVC: Enable support Control Flow Guard
5. MSVC: Don't generate debug symbols for release builds.
6. MSVC: Add support for VC-LTL.

Signed-off-by: Yuhang Zhao <2546789017@qq.com>
---
 scripts/toolchains/VC-LTL.cmake  | 88 ++++++++++++++++++++++++++++++++
 scripts/toolchains/windows.cmake | 35 +++++++------
 2 files changed, 107 insertions(+), 16 deletions(-)
 create mode 100644 scripts/toolchains/VC-LTL.cmake

diff --git a/scripts/toolchains/VC-LTL.cmake b/scripts/toolchains/VC-LTL.cmake
new file mode 100644
index 000000000..10ef62049
--- /dev/null
+++ b/scripts/toolchains/VC-LTL.cmake
@@ -0,0 +1,88 @@
+﻿cmake_minimum_required(VERSION 3.5.2)
+
+#
+#  VC-LTL自动化加载配置，建议你将此文件单独复制到你的工程再使用，该文件能自动识别当前环境是否存在VC-LTL，并且自动应用。
+#
+#  使用方法：
+#    1. 在“CMakeLists.txt” 添加 “include("VC-LTL helper for cmake.cmake")”。
+#
+#  VC-LTL默认搜索顺序
+#    1. “VC-LTL helper for cmake.cmake”所在根目录，即 ${CMAKE_CURRENT_LIST_DIR}
+#    2. 当前CMake根目录，即 ${CMAKE_CURRENT_SOURCE_DIR}/VC-LTL
+#    3. 当前项目根目录，即 ${PROJECT_SOURCE_DIR}/VC-LTL
+#    4. 当前CMake父目录，即 ${CMAKE_CURRENT_SOURCE_DIR}/../VC-LTL
+#    5. 当前项目根目录，即 ${PROJECT_SOURCE_DIR}/../VC-LTL
+#    6. 注册表HKEY_CURRENT_USER\Code\VC-LTL@Root
+#
+#  把VC-LTL放在其中一个位置即可，VC-LTL就能被自动引用。
+#
+#  如果你对默认搜索顺序不满，你可以修改此文件。你也可以直接指定${VC_LTL_Root}宏更加任性的去加载VC-LTL。
+#
+
+
+
+
+#####################################################################VC-LTL设置#####################################################################
+
+#控制TargetPlatform版本，目前可用版本为5.1.2600.0     6.0.6000.0（默认）    6.2.9200.0     10.0.10240.0    10.0.19041.0
+#set(WindowsTargetPlatformMinVersion "10.0.19041.0" CACHE STRING "" FORCE)
+
+#启用干净的导入表，消除 ucrt apiset(如：api-ms-win-crt-time-l1-1-0.dll)，满足强迫症患者。
+#set(CleanImport "true" CACHE STRING "" FORCE)
+
+####################################################################################################################################################
+
+if(NOT VC_LTL_Root)
+	if(EXISTS ${CMAKE_CURRENT_LIST_DIR}/_msvcrt.h)
+		set(VC_LTL_Root ${CMAKE_CURRENT_LIST_DIR})
+	endif()
+endif()
+
+if(NOT VC_LTL_Root)
+	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/VC-LTL/_msvcrt.h)
+		set(VC_LTL_Root ${CMAKE_CURRENT_SOURCE_DIR}/VC-LTL)
+	endif()
+endif()
+
+if(NOT VC_LTL_Root)
+	if(EXISTS ${PROJECT_SOURCE_DIR}/VC-LTL/_msvcrt.h)
+        set(VC_LTL_Root ${PROJECT_SOURCE_DIR}/VC-LTL)
+    endif()
+endif()
+
+if(NOT VC_LTL_Root)
+	if(EXISTS ${CMAKE_CURRENT_SOURCE_DIR}/../VC-LTL/_msvcrt.h)
+        set(VC_LTL_Root ${CMAKE_CURRENT_SOURCE_DIR}/../VC-LTL)
+    endif()
+endif()
+
+if(NOT VC_LTL_Root)
+	if(EXISTS ${PROJECT_SOURCE_DIR}/../VC-LTL/_msvcrt.h)
+        set(VC_LTL_Root ${PROJECT_SOURCE_DIR}/../VC-LTL)
+    endif()
+endif()
+
+if(NOT VC_LTL_Root)
+    EXECUTE_PROCESS(COMMAND reg query "HKEY_CURRENT_USER\\Code\\VC-LTL" -v "Root"
+                    OUTPUT_VARIABLE FOUND_FILE
+                    ERROR_VARIABLE ERROR_INFO
+                   )
+
+    string(REGEX MATCH "[a-zA-Z]:\\\\.+\\\\"
+           FOUND_LTL
+           ${FOUND_FILE})
+    if (NOT ${FOUND_LTL} STREQUAL "")
+        set(VC_LTL_Root ${FOUND_LTL})
+    endif()
+
+    if(NOT DEFINED VC_LTL_Root)
+        string(REGEX MATCH "\\\\\\\\.+\\\\" FOUND_LTL ${FOUND_FILE})
+        if (NOT ${FOUND_LTL} STREQUAL "")
+            set(VC_LTL_Root ${FOUND_LTL})
+        endif()
+    endif()
+endif()
+
+if(VC_LTL_Root)
+    include("${VC_LTL_Root}\\config\\config.cmake")
+endif()
diff --git a/scripts/toolchains/windows.cmake b/scripts/toolchains/windows.cmake
index 7c8a54989..053ad37f0 100644
--- a/scripts/toolchains/windows.cmake
+++ b/scripts/toolchains/windows.cmake
@@ -1,6 +1,6 @@
 if(NOT _VCPKG_WINDOWS_TOOLCHAIN)
 set(_VCPKG_WINDOWS_TOOLCHAIN 1)
-set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>$<$<STREQUAL:${VCPKG_CRT_LINKAGE},dynamic>:DLL>" CACHE STRING "")
+set(CMAKE_MSVC_RUNTIME_LIBRARY "MultiThreaded$<$<CONFIG:Debug>:Debug>" CACHE STRING "" FORCE)
 
 set(CMAKE_SYSTEM_NAME Windows CACHE STRING "")
 
@@ -37,13 +37,7 @@ endif()
 get_property( _CMAKE_IN_TRY_COMPILE GLOBAL PROPERTY IN_TRY_COMPILE )
 if(NOT _CMAKE_IN_TRY_COMPILE)
 
-    if(VCPKG_CRT_LINKAGE STREQUAL "dynamic")
-        set(VCPKG_CRT_LINK_FLAG_PREFIX "/MD")
-    elseif(VCPKG_CRT_LINKAGE STREQUAL "static")
-        set(VCPKG_CRT_LINK_FLAG_PREFIX "/MT")
-    else()
-        message(FATAL_ERROR "Invalid setting for VCPKG_CRT_LINKAGE: \"${VCPKG_CRT_LINKAGE}\". It must be \"static\" or \"dynamic\"")
-    endif()
+    set(VCPKG_CRT_LINK_FLAG_PREFIX "/MT" CACHE STRING "" FORCE)
 
     set(CHARSET_FLAG "/utf-8")
     if (NOT VCPKG_SET_CHARSET_FLAG OR VCPKG_PLATFORM_TOOLSET MATCHES "v120")
@@ -51,23 +45,32 @@ if(NOT _CMAKE_IN_TRY_COMPILE)
         set(CHARSET_FLAG)
     endif()
 
-    set(CMAKE_CXX_FLAGS " /nologo /DWIN32 /D_WINDOWS /W3 ${CHARSET_FLAG} /GR /EHsc /MP ${VCPKG_CXX_FLAGS}" CACHE STRING "")
-    set(CMAKE_C_FLAGS " /nologo /DWIN32 /D_WINDOWS /W3 ${CHARSET_FLAG} /MP ${VCPKG_C_FLAGS}" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS " /nologo /await:strict /bigobj /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /W3 ${CHARSET_FLAG} /GR /EHsc /MP /FS /Zc:__cplusplus /ZH:SHA_256 ${VCPKG_CXX_FLAGS}" CACHE STRING "")
+    set(CMAKE_C_FLAGS " /nologo /bigobj /DWIN32 /D_WINDOWS /DUNICODE /D_UNICODE /W3 ${CHARSET_FLAG} /MP /FS /ZH:SHA_256 ${VCPKG_C_FLAGS}" CACHE STRING "")
     set(CMAKE_RC_FLAGS "-c65001 /DWIN32" CACHE STRING "")
 
     unset(CHARSET_FLAG)
 
-    set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Z7 /Ob0 /Od /RTC1 ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")
-    set(CMAKE_C_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Z7 /Ob0 /Od /RTC1 ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
-    set(CMAKE_CXX_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Oi /Gy /DNDEBUG /Z7 ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
-    set(CMAKE_C_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Oi /Gy /DNDEBUG /Z7 ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Zi /Ob0 /Od /RTC1 ${VCPKG_CXX_FLAGS_DEBUG}" CACHE STRING "")
+    set(CMAKE_C_FLAGS_DEBUG "/D_DEBUG ${VCPKG_CRT_LINK_FLAG_PREFIX}d /Zi /Ob0 /Od /RTC1 ${VCPKG_C_FLAGS_DEBUG}" CACHE STRING "")
+    set(CMAKE_CXX_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Ob3 /Oi /Oy /DNDEBUG /guard:cf /guard:ehcont /GL /GT /Gw /Gy /QIntel-jcc-erratum /Qspectre-load /Zc:inline ${VCPKG_CXX_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_C_FLAGS_RELEASE "${VCPKG_CRT_LINK_FLAG_PREFIX} /O2 /Ob3 /Oi /Oy /DNDEBUG /guard:cf /guard:ehcont /GL /GT /Gw /Gy /QIntel-jcc-erratum /Qspectre-load /Zc:inline ${VCPKG_C_FLAGS_RELEASE}" CACHE STRING "")
 
     string(APPEND CMAKE_STATIC_LINKER_FLAGS_RELEASE_INIT " /nologo ")
-    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/nologo /DEBUG /INCREMENTAL:NO /OPT:REF /OPT:ICF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
-    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/nologo /DEBUG /INCREMENTAL:NO /OPT:REF /OPT:ICF ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_SHARED_LINKER_FLAGS_RELEASE "/nologo /CETCOMPAT /DYNAMICBASE /HIGHENTROPYVA /LARGEADDRESSAWARE /LTCG /NXCOMPAT /INCREMENTAL:NO /OPT:REF /OPT:ICF /GUARD:CF /guard:ehcont /force:guardehcont ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
+    set(CMAKE_EXE_LINKER_FLAGS_RELEASE "/nologo /CETCOMPAT /DYNAMICBASE /HIGHENTROPYVA /LARGEADDRESSAWARE /LTCG /NXCOMPAT /TSAWARE /INCREMENTAL:NO /OPT:REF /OPT:ICF /GUARD:CF /guard:ehcont /force:guardehcont ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_RELEASE}" CACHE STRING "")
 
     string(APPEND CMAKE_STATIC_LINKER_FLAGS_DEBUG_INIT " /nologo ")
     string(APPEND CMAKE_SHARED_LINKER_FLAGS_DEBUG_INIT " /nologo ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_DEBUG} ")
     string(APPEND CMAKE_EXE_LINKER_FLAGS_DEBUG_INIT " /nologo ${VCPKG_LINKER_FLAGS} ${VCPKG_LINKER_FLAGS_DEBUG} ")
+
+    # Shared to msvcrt.dll or ucrtbase.dll and optimize the C/C++ application file size.
+    # https://github.com/Chuyu-Team/VC-LTL5
+    if(DEFINED VCPKG_VCLTL_DIR)
+        set(VC_LTL_Root ${VCPKG_VCLTL_DIR} CACHE STRING "" FORCE)
+    endif()
+    set(WindowsTargetPlatformMinVersion "10.0.19041.0" CACHE STRING "" FORCE)
+    set(CleanImport "true" CACHE STRING "" FORCE)
+    include("${CMAKE_CURRENT_LIST_DIR}/VC-LTL.cmake")
 endif()
 endif()
-- 
2.36.1.windows.1

